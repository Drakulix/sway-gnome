#!/bin/bash

urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

IMAGE_RE="([0-9]+)x([0-9]+)"
FOLDER="$(dirname "$(readlink -f "$0")")"
LOCK="$FOLDER/lock.png"
TEXT="$FOLDER/text.png"
PARAMS=""
INPUT_IMAGE=$(urldecode "$(gsettings get org.gnome.desktop.background picture-uri | cut -c 9- | rev | cut -c 2- | rev)")
OUTPUT_IMAGE="/tmp/lock.png"
DISPLAY_TEXT=false
PIXELATE=false

# Read user input
POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
  -n|--no-text)
    DISPLAY_TEXT=false
    shift # past argument
    ;;
  -p|--pixelate)
    PIXELATE=true
    shift # past argument
    ;;
  *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

#Get dimensions of the lock image:
LOCK_IMAGE_INFO=`identify $LOCK`
[[ $LOCK_IMAGE_INFO =~ $IMAGE_RE ]]
IMAGE_WIDTH=${BASH_REMATCH[1]}
IMAGE_HEIGHT=${BASH_REMATCH[2]}

if $DISPLAY_TEXT ; then
  #Get dimensions of the text image:
  TEXT_IMAGE_INFO=`identify $TEXT`
  [[ $TEXT_IMAGE_INFO =~ $IMAGE_RE ]]
  TEXT_WIDTH=${BASH_REMATCH[1]}
  TEXT_HEIGHT=${BASH_REMATCH[2]}
fi

#Extract information and append some parameters to the ones that will be given to ImageMagick:
WIDTH=`echo $LINE | jq '.rect.width'`
HEIGHT=`echo $LINE | jq '.rect.height'`

INPUT_IMAGE_INFO=$(identify "$INPUT_IMAGE")
[[ $INPUT_IMAGE_INFO =~ $IMAGE_RE ]]
WIDTH=${BASH_REMATCH[1]}
HEIGHT=${BASH_REMATCH[2]}

X=0
Y=0
POS_X=$(($X+$WIDTH/2-$IMAGE_WIDTH/2))
POS_Y=$(($Y+$HEIGHT/2-$IMAGE_HEIGHT/2))
LOCK_PARAMS=" $LOCK_PARAMS --image $OUTPUT_IMAGE"
PARAMS=" '$LOCK' '-geometry' '+$POS_X+$POS_Y' '-composite'"

if $DISPLAY_TEXT ; then
  TEXT_X=$(($X+$WIDTH/2-$TEXT_WIDTH/2))
  TEXT_Y=$(($Y+$HEIGHT/2-$TEXT_HEIGHT/2+200))
  PARAMS="$PARAMS '$TEXT' '-geometry' '+$TEXT_X+$TEXT_Y' '-composite'"
fi

#Execute ImageMagick:
PARAMS="'$INPUT_IMAGE' $PARAMS '$OUTPUT_IMAGE'"
eval convert $PARAMS

# Blank screen
swayidle timeout 3 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' &

#Lock the screen
swaylock -s fill $LOCK_PARAMS

#Remove the generated image:
rm $OUTPUT_IMAGE

kill 0
